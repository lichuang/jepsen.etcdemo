2022-08-25 19:24:23,882{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test --node localhost --username codedump --password 123456
2022-08-25 19:24:23,896{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:remote #jepsen.control.SSHRemote{:session nil}
 :concurrency 1
 :db
 #object[jepsen.etcdemo$db$reify__2460
         "0x15324f25"
         "jepsen.etcdemo$db$reify__2460@15324f25"]
 :leave-db-running? false
 :name "etcd"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x471d6571" "2022-08-25T19:24:23.000+08:00"]
 :net
 #object[jepsen.net$reify__9085 "0x213bd66a" "jepsen.net$reify__9085@213bd66a"]
 :client #jepsen.etcdemo.Client{:conn nil}
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x5692863"
         "java.util.concurrent.CyclicBarrier@5692863"]
 :ssh
 {:dummy? false,
  :username "codedump",
  :password "123456",
  :strict-host-key-checking false,
  :private-key-path nil}
 :checker
 #object[jepsen.checker$unbridled_optimism$reify__8609
         "0x77a1df4d"
         "jepsen.checker$unbridled_optimism$reify__8609@77a1df4d"]
 :argv
 ("test" "--node" "localhost" "--username" "codedump" "--password" "123456")
 :nemesis
 #object[jepsen.nemesis$reify__9186
         "0x5bbb0a25"
         "jepsen.nemesis$reify__9186@5bbb0a25"]
 :active-histories
 #object[clojure.lang.Atom "0x12e13abd" {:status :ready, :val #{}}]
 :nodes ["localhost"]
 :test-count 1
 :generator nil
 :os
 #object[jepsen.os.ubuntu.Ubuntu
         "0x237824b0"
         "jepsen.os.ubuntu.Ubuntu@237824b0"]
 :time-limit 60}

2022-08-25 19:24:24,002{GMT}	INFO	[jepsen node localhost] jepsen.os.ubuntu: localhost setting up ubuntu
2022-08-25 19:24:24,787{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2022-08-25 19:24:24,789{GMT}	INFO	[jepsen node localhost] jepsen.etcdemo: localhost tearing down etcd
2022-08-25 19:24:24,789{GMT}	INFO	[jepsen node localhost] jepsen.control.util: Stopping etcd
2022-08-25 19:24:25,098{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2022-08-25 19:24:25,099{GMT}	INFO	[jepsen node localhost] jepsen.etcdemo: localhost installing etcd v3.1.5
2022-08-25 19:24:26,319{GMT}	INFO	[jepsen node localhost] jepsen.control.util: starting etcd
2022-08-25 19:24:36,524{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2022-08-25 19:24:36,526{GMT}	INFO	[jepsen node localhost] jepsen.etcdemo: localhost tearing down etcd
2022-08-25 19:24:36,527{GMT}	INFO	[jepsen node localhost] jepsen.control.util: Stopping etcd
2022-08-25 19:24:36,841{GMT}	WARN	[main] jepsen.core: Test crashed!
java.lang.IllegalStateException: Jepsen 0.2.0 introduced significant changes to the generator system, and the semantics of your test may have changed. See jepsen.generator's docs for an extensive migration guide, and when you're ready to proceed, set `:pure-generators true` on your test map.
	at jepsen.core$run_case_BANG_.invokeStatic(core.clj:217)
	at jepsen.core$run_case_BANG_.invoke(core.clj:213)
	at jepsen.core$run_BANG_$fn__9768$fn__9775.invoke(core.clj:366)
	at jepsen.core$run_BANG_$fn__9768.invoke(core.clj:363)
	at jepsen.core$run_BANG_.invokeStatic(core.clj:349)
	at jepsen.core$run_BANG_.invoke(core.clj:276)
	at jepsen.cli$single_test_cmd$fn__10529.invoke(cli.clj:382)
	at jepsen.cli$run_BANG_.invokeStatic(cli.clj:317)
	at jepsen.cli$run_BANG_.invoke(cli.clj:246)
	at jepsen.etcdemo$_main.invokeStatic(etcdemo.clj:107)
	at jepsen.etcdemo$_main.doInvoke(etcdemo.clj:103)
	at clojure.lang.RestFn.invoke(RestFn.java:551)
	at clojure.lang.Var.invoke(Var.java:424)
	at user$eval140.invokeStatic(form-init10570886795803675388.clj:1)
	at user$eval140.invoke(form-init10570886795803675388.clj:1)
	at clojure.lang.Compiler.eval(Compiler.java:7176)
	at clojure.lang.Compiler.eval(Compiler.java:7166)
	at clojure.lang.Compiler.load(Compiler.java:7635)
	at clojure.lang.Compiler.loadFile(Compiler.java:7573)
	at clojure.main$load_script.invokeStatic(main.clj:452)
	at clojure.main$init_opt.invokeStatic(main.clj:454)
	at clojure.main$init_opt.invoke(main.clj:454)
	at clojure.main$initialize.invokeStatic(main.clj:485)
	at clojure.main$null_opt.invokeStatic(main.clj:519)
	at clojure.main$null_opt.invoke(main.clj:516)
	at clojure.main$main.invokeStatic(main.clj:598)
	at clojure.main$main.doInvoke(main.clj:561)
	at clojure.lang.RestFn.applyTo(RestFn.java:137)
	at clojure.lang.Var.applyTo(Var.java:705)
	at clojure.main.main(main.java:37)
